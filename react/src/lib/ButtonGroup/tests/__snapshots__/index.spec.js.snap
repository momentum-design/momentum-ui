// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests for <ButtonGroup /> should match SnapShot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ButtonGroup
    active=""
    ariaLabel=""
    className=""
    focusFirstQuery=""
    focusOnLoad={false}
    focusQuery=""
    highlightSelected={true}
    justified={true}
    onSelect={null}
    pillWidth="60px"
    theme=""
    type=""
  >
    <ForwardRef(render)
      ariaLabel="test"
    >
      1
    </ForwardRef(render)>
  </ButtonGroup>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <div
        aria-label=""
        className="md-button-group md-button-group--justified"
        role="group"
      >
        <UIDReset>
          <Context.Provider
            value={
              Object {
                "active": "",
                "focus": null,
                "isButtonGroup": true,
                "width": "60px",
              }
            }
          >
            <ForwardRef(render)
              ariaLabel="test"
            >
              1
            </ForwardRef(render)>
          </Context.Provider>
        </UIDReset>
      </div>,
      "value": Object {
        "parentKeyDown": [Function],
        "parentOnSelect": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "aria-label": "",
        "children": <UIDReset>
          <Context.Provider
            value={
              Object {
                "active": "",
                "focus": null,
                "isButtonGroup": true,
                "width": "60px",
              }
            }
          >
            <ForwardRef(render)
              ariaLabel="test"
            >
              1
            </ForwardRef(render)>
          </Context.Provider>
        </UIDReset>,
        "className": "md-button-group md-button-group--justified",
        "role": "group",
      },
      "ref": [Function],
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Context.Provider
            value={
              Object {
                "active": "",
                "focus": null,
                "isButtonGroup": true,
                "width": "60px",
              }
            }
          >
            <ForwardRef(render)
              ariaLabel="test"
            >
              1
            </ForwardRef(render)>
          </Context.Provider>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <ForwardRef(render)
              ariaLabel="test"
            >
              1
            </ForwardRef(render)>,
            "value": Object {
              "active": "",
              "focus": null,
              "isButtonGroup": true,
              "width": "60px",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "ariaLabel": "test",
              "children": "1",
            },
            "ref": null,
            "rendered": "1",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "displayName": "ContextTransform(Button)",
              "propTypes": undefined,
              "render": [Function],
            },
          },
          "type": Object {
            "$$typeof": Symbol(react.provider),
            "_context": Object {
              "$$typeof": Symbol(react.context),
              "Consumer": Object {
                "$$typeof": Symbol(react.context),
                "_calculateChangedBits": null,
                "_context": [Circular],
              },
              "Provider": [Circular],
              "_calculateChangedBits": null,
              "_currentRenderer": null,
              "_currentRenderer2": null,
              "_currentValue": null,
              "_currentValue2": null,
              "_threadCount": 0,
            },
          },
        },
        "type": [Function],
      },
      "type": "div",
    },
    "type": Object {
      "$$typeof": Symbol(react.provider),
      "_context": Object {
        "$$typeof": Symbol(react.context),
        "Consumer": Object {
          "$$typeof": Symbol(react.context),
          "_calculateChangedBits": null,
          "_context": [Circular],
        },
        "Provider": [Circular],
        "_calculateChangedBits": null,
        "_currentRenderer": null,
        "_currentRenderer2": null,
        "_currentValue": undefined,
        "_currentValue2": undefined,
        "_threadCount": 0,
      },
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <div
          aria-label=""
          className="md-button-group md-button-group--justified"
          role="group"
        >
          <UIDReset>
            <Context.Provider
              value={
                Object {
                  "active": "",
                  "focus": null,
                  "isButtonGroup": true,
                  "width": "60px",
                }
              }
            >
              <ForwardRef(render)
                ariaLabel="test"
              >
                1
              </ForwardRef(render)>
            </Context.Provider>
          </UIDReset>
        </div>,
        "value": Object {
          "parentKeyDown": [Function],
          "parentOnSelect": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "",
          "children": <UIDReset>
            <Context.Provider
              value={
                Object {
                  "active": "",
                  "focus": null,
                  "isButtonGroup": true,
                  "width": "60px",
                }
              }
            >
              <ForwardRef(render)
                ariaLabel="test"
              >
                1
              </ForwardRef(render)>
            </Context.Provider>
          </UIDReset>,
          "className": "md-button-group md-button-group--justified",
          "role": "group",
        },
        "ref": [Function],
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Context.Provider
              value={
                Object {
                  "active": "",
                  "focus": null,
                  "isButtonGroup": true,
                  "width": "60px",
                }
              }
            >
              <ForwardRef(render)
                ariaLabel="test"
              >
                1
              </ForwardRef(render)>
            </Context.Provider>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": <ForwardRef(render)
                ariaLabel="test"
              >
                1
              </ForwardRef(render)>,
              "value": Object {
                "active": "",
                "focus": null,
                "isButtonGroup": true,
                "width": "60px",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "ariaLabel": "test",
                "children": "1",
              },
              "ref": null,
              "rendered": "1",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "displayName": "ContextTransform(Button)",
                "propTypes": undefined,
                "render": [Function],
              },
            },
            "type": Object {
              "$$typeof": Symbol(react.provider),
              "_context": Object {
                "$$typeof": Symbol(react.context),
                "Consumer": Object {
                  "$$typeof": Symbol(react.context),
                  "_calculateChangedBits": null,
                  "_context": [Circular],
                },
                "Provider": [Circular],
                "_calculateChangedBits": null,
                "_currentRenderer": null,
                "_currentRenderer2": null,
                "_currentValue": null,
                "_currentValue2": null,
                "_threadCount": 0,
              },
            },
          },
          "type": [Function],
        },
        "type": "div",
      },
      "type": Object {
        "$$typeof": Symbol(react.provider),
        "_context": Object {
          "$$typeof": Symbol(react.context),
          "Consumer": Object {
            "$$typeof": Symbol(react.context),
            "_calculateChangedBits": null,
            "_context": [Circular],
          },
          "Provider": [Circular],
          "_calculateChangedBits": null,
          "_currentRenderer": null,
          "_currentRenderer2": null,
          "_currentValue": undefined,
          "_currentValue2": undefined,
          "_threadCount": 0,
        },
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
